;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name cljs-2048.game, :imports nil, :requires nil, :uses nil, :defs {game-turn {:protocol-inline nil, :meta {:file "/home/mp/IDE/clojure/cljs-2048/src/clj_2048/game.cljs", :line 129, :column 7, :end-line 129, :end-column 16, :arglists (quote ([{prev-board :board, phase :phase, :as prev-state} direction])), :doc "Processes the game state according to the passed turn.\n\n  Depending on the passed state and the direction, the resulting state may be:\n  - game in progress, some fields moved/squashed\n  - game lost - no possible moves\n  - illegal move - squashing the fields in certain direction will not result\n    in fields moved/squashed.\n  "}, :name cljs-2048.game/game-turn, :variadic false, :file "src/clj_2048/game.cljs", :end-column 16, :method-params ([p__23832 direction]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{prev-board :board, phase :phase, :as prev-state} direction])), :doc "Processes the game state according to the passed turn.\n\n  Depending on the passed state and the direction, the resulting state may be:\n  - game in progress, some fields moved/squashed\n  - game lost - no possible moves\n  - illegal move - squashing the fields in certain direction will not result\n    in fields moved/squashed.\n  "}, new-board {:protocol-inline nil, :meta {:file "/home/mp/IDE/clojure/cljs-2048/src/clj_2048/game.cljs", :line 11, :column 16, :end-line 11, :end-column 25, :export true, :arglists (quote ([size])), :doc "Returns a size × size board with 2 initial values (twos or fours)\n  and the rest of zeros."}, :name cljs-2048.game/new-board, :variadic false, :file "src/clj_2048/game.cljs", :end-column 25, :method-params ([size]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([size])), :doc "Returns a size × size board with 2 initial values (twos or fours)\n  and the rest of zeros."}, zero-pad {:protocol-inline nil, :meta {:file "/home/mp/IDE/clojure/cljs-2048/src/clj_2048/game.cljs", :line 40, :column 7, :end-line 40, :end-column 15, :arglists (quote ([size combined-row]))}, :name cljs-2048.game/zero-pad, :variadic false, :file "src/clj_2048/game.cljs", :end-column 15, :method-params ([size combined-row]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([size combined-row]))}, left-view->board-transformations {:name cljs-2048.game/left-view->board-transformations, :file "src/clj_2048/game.cljs", :line 66, :column 1, :end-line 66, :end-column 38, :meta {:file "/home/mp/IDE/clojure/cljs-2048/src/clj_2048/game.cljs", :line 66, :column 6, :end-line 66, :end-column 38}}, view-transformations {:name cljs-2048.game/view-transformations, :file "src/clj_2048/game.cljs", :line 43, :column 1, :end-line 43, :end-column 26, :meta {:file "/home/mp/IDE/clojure/cljs-2048/src/clj_2048/game.cljs", :line 43, :column 6, :end-line 43, :end-column 26}, :doc "A map of operations that cast the board to the shape that makes combining\n  cells in any direction appear as combining them left (so a single cell\n  squashing implementation is enough).\n\n  The 'left-squashing view' can be cast back to normal by applying these\n  same operations in reverse.\n  "}, update-map-values {:protocol-inline nil, :meta {:file "/home/mp/IDE/clojure/cljs-2048/src/clj_2048/game.cljs", :line 56, :column 7, :end-line 56, :end-column 24, :arglists (quote ([f m])), :doc "Returns a map with f applied to each value."}, :name cljs-2048.game/update-map-values, :variadic false, :file "src/clj_2048/game.cljs", :end-column 24, :method-params ([f m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f m])), :doc "Returns a map with f applied to each value."}, unplayable? {:protocol-inline nil, :meta {:file "/home/mp/IDE/clojure/cljs-2048/src/clj_2048/game.cljs", :line 104, :column 7, :end-line 104, :end-column 18, :arglists (quote ([board])), :doc "Returns true if it's not possible to move/combine fields in any direction."}, :name cljs-2048.game/unplayable?, :variadic false, :file "src/clj_2048/game.cljs", :end-column 18, :method-params ([board]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 1, :fn-var true, :arglists (quote ([board])), :doc "Returns true if it's not possible to move/combine fields in any direction."}, revectorize {:protocol-inline nil, :meta {:file "/home/mp/IDE/clojure/cljs-2048/src/clj_2048/game.cljs", :line 85, :column 7, :end-line 85, :end-column 18, :arglists (quote ([seqs]))}, :name cljs-2048.game/revectorize, :variadic false, :file "src/clj_2048/game.cljs", :end-column 18, :method-params ([seqs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([seqs]))}, combine-left {:protocol-inline nil, :meta {:file "/home/mp/IDE/clojure/cljs-2048/src/clj_2048/game.cljs", :line 31, :column 7, :end-line 31, :end-column 19, :arglists (quote ([row-nums])), :doc "Sums pairs of equal numbers in a row together by squashing them left."}, :name cljs-2048.game/combine-left, :variadic false, :file "src/clj_2048/game.cljs", :end-column 19, :method-params ([row-nums]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([row-nums])), :doc "Sums pairs of equal numbers in a row together by squashing them left."}, flip {:protocol-inline nil, :meta {:file "/home/mp/IDE/clojure/cljs-2048/src/clj_2048/game.cljs", :line 26, :column 7, :end-line 26, :end-column 11, :arglists (quote ([board])), :doc "Reverses the order of the cells in all board rows."}, :name cljs-2048.game/flip, :variadic false, :file "src/clj_2048/game.cljs", :end-column 11, :method-params ([board]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([board])), :doc "Reverses the order of the cells in all board rows."}, transpose {:protocol-inline nil, :meta {:file "/home/mp/IDE/clojure/cljs-2048/src/clj_2048/game.cljs", :line 23, :column 7, :end-line 23, :end-column 16, :arglists (quote ([board]))}, :name cljs-2048.game/transpose, :variadic false, :file "src/clj_2048/game.cljs", :end-column 16, :method-params ([board]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([board]))}, zeros-in-row {:protocol-inline nil, :meta {:file "/home/mp/IDE/clojure/cljs-2048/src/clj_2048/game.cljs", :line 97, :column 7, :end-line 97, :end-column 19, :arglists (quote ([row])), :doc "Returns indices of zero values in the row."}, :name cljs-2048.game/zeros-in-row, :variadic false, :file "src/clj_2048/game.cljs", :end-column 19, :method-params ([row]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([row])), :doc "Returns indices of zero values in the row."}, left-view->board {:protocol-inline nil, :meta {:file "/home/mp/IDE/clojure/cljs-2048/src/clj_2048/game.cljs", :line 77, :column 7, :end-line 77, :end-column 23, :arglists (quote ([direction left-view])), :doc "Rotates/transposes the left view back to get the board.\n\n  The view must be of normal length, if some numbers got combined,\n  zeros must be appended."}, :name cljs-2048.game/left-view->board, :variadic false, :file "src/clj_2048/game.cljs", :end-column 23, :method-params ([direction left-view]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 2, :fn-var true, :arglists (quote ([direction left-view])), :doc "Rotates/transposes the left view back to get the board.\n\n  The view must be of normal length, if some numbers got combined,\n  zeros must be appended."}, empty-board {:protocol-inline nil, :meta {:file "/home/mp/IDE/clojure/cljs-2048/src/clj_2048/game.cljs", :line 6, :column 7, :end-line 6, :end-column 18, :arglists (quote ([size])), :doc "Returns a size × size matrix of zeros."}, :name cljs-2048.game/empty-board, :variadic false, :file "src/clj_2048/game.cljs", :end-column 18, :method-params ([size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([size])), :doc "Returns a size × size matrix of zeros."}, squash-board {:protocol-inline nil, :meta {:file "/home/mp/IDE/clojure/cljs-2048/src/clj_2048/game.cljs", :line 88, :column 7, :end-line 88, :end-column 19, :arglists (quote ([board direction])), :doc "Combines fields in the given direction."}, :name cljs-2048.game/squash-board, :variadic false, :file "src/clj_2048/game.cljs", :end-column 19, :method-params ([board direction]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 2, :fn-var true, :arglists (quote ([board direction])), :doc "Combines fields in the given direction."}, board->left-view-transformations {:name cljs-2048.game/board->left-view-transformations, :file "src/clj_2048/game.cljs", :line 61, :column 1, :end-line 61, :end-column 38, :meta {:file "/home/mp/IDE/clojure/cljs-2048/src/clj_2048/game.cljs", :line 61, :column 6, :end-line 61, :end-column 38}}, inject-number {:protocol-inline nil, :meta {:file "/home/mp/IDE/clojure/cljs-2048/src/clj_2048/game.cljs", :line 120, :column 7, :end-line 120, :end-column 20, :arglists (quote ([board empty-fields-coords] [board empty-fields-coords rand-nth-new-number-fn cell-value-function])), :doc "Places 2 or 4 onto one of empty fields.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([board empty-fields-coords] [board empty-fields-coords rand-nth-new-number-fn cell-value-function]), :arglists ([board empty-fields-coords] [board empty-fields-coords rand-nth-new-number-fn cell-value-function]), :arglists-meta (nil nil)}}, :name cljs-2048.game/inject-number, :variadic false, :file "src/clj_2048/game.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([board empty-fields-coords] [board empty-fields-coords rand-nth-new-number-fn cell-value-function]), :arglists ([board empty-fields-coords] [board empty-fields-coords rand-nth-new-number-fn cell-value-function]), :arglists-meta (nil nil)}, :method-params ([board empty-fields-coords] [board empty-fields-coords rand-nth-new-number-fn cell-value-function]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 4, :fn-var true, :arglists ([board empty-fields-coords] [board empty-fields-coords rand-nth-new-number-fn cell-value-function]), :doc "Places 2 or 4 onto one of empty fields."}, zeros-locations {:protocol-inline nil, :meta {:file "/home/mp/IDE/clojure/cljs-2048/src/clj_2048/game.cljs", :line 111, :column 7, :end-line 111, :end-column 22, :arglists (quote ([board])), :doc "Returns 2-tuples of coordinates of zero cells in the board."}, :name cljs-2048.game/zeros-locations, :variadic false, :file "src/clj_2048/game.cljs", :end-column 22, :method-params ([board]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists (quote ([board])), :doc "Returns 2-tuples of coordinates of zero cells in the board."}, board->left-view {:protocol-inline nil, :meta {:file "/home/mp/IDE/clojure/cljs-2048/src/clj_2048/game.cljs", :line 71, :column 7, :end-line 71, :end-column 23, :arglists (quote ([direction board])), :doc "Returns board flipped or transposed so that combining numbers\n  in the given direction can be performed as squashing them left."}, :name cljs-2048.game/board->left-view, :variadic false, :file "src/clj_2048/game.cljs", :end-column 23, :method-params ([direction board]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 2, :fn-var true, :arglists (quote ([direction board])), :doc "Returns board flipped or transposed so that combining numbers\n  in the given direction can be performed as squashing them left."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:down :lost :phase :up :right :board :left}, :order [:up :right :down :left :board :phase :lost]}, :doc nil}